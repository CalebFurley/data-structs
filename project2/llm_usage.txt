-----------------------------------------------------------------------------------------------------------------------
Prompt:
    How can I get a certain character from a c++ string. Is there a way I can pop it?

Response:
    To get a certain character from a C++ string, you can use the `at()` method or the subscript 
    operator `[]`. However, if you want to remove (pop) a character from the string, you can use the 
    `erase()` method.

    Here's how you can do both:

    1. **Access a character**:
    ```cpp
    char c = inputBuffer.at(index); // Using at() method
    char c = inputBuffer[index];    // Using subscript operator
    ```

    2. **Remove (pop) a character**:
    ```cpp
    inputBuffer.erase(index, 1); // Removes the character at the specified index
    ```

    Here's an example demonstrating both:

    ```cpp
    #include <iostream>
    #include <string>

    int main() {
        std::string inputBuffer = "example";

        // Access the character at index 2
        char c = inputBuffer.at(2); // or inputBuffer[2]
        std::cout << "Character at index 2: " << c << std::endl;

        // Remove (pop) the character at index 2
        inputBuffer.erase(2, 1);
        std::cout << "String after popping character at index 2: " << inputBuffer << std::endl;

        return 0;
    }
    ```

    In your specific case, if you want to read the chip ID based on the first letter and then 
    remove that letter from the string, you can do something like this:

    ```cpp
    for (int i = 0; i < numChips; i++) { 
        inputBuffer = "";
        cin >> inputBuffer;
        cout << inputBuffer << "\n";
        
        // Read the chip ID based on the first letter
        char chipID = inputBuffer[0];
        inputBuffer.erase(0, 1); // Remove the first letter from the string
        
        // Create the chip object and initialize it appropriately
        // Store the chip object in the allChips array
    }
    ```

Reasoning: 
    Looking for an efficient way to breakdown and read the input strings for building
    the chips.
-----------------------------------------------------------------------------------------------------------------------
Prompt:
    What is this error? 
        terminate called after throwing an instance of 'std::bad_alloc'
        what():  std::bad_alloc
        Aborted (core dumped)

Response:
        The `std::bad_alloc` exception is thrown when the program fails to allocate memory using `new`.
        This can happen if the system runs out of memory or if there is a bug in the code that causes
        excessive memory allocation.

        To diagnose and fix this issue, follow these steps:

        1. **Check Memory Allocation**: Ensure that memory allocation is done correctly and that there are no
         excessive or unnecessary allocations.

        2. **Check for Memory Leaks**: Ensure that all allocated memory is properly deallocated.

        3. **Check Array Size**: Ensure that the size of the array being allocated is reasonable and within the 
        limits of available memory.

        Here's an example of how you might allocate and deallocate memory for an array of objects:

        ```cpp
        #include <iostream>
        #include <stdexcept>

        class Chip {
            // Chip class definition
        };

        int main() {
            int numChips = 10; // Example number of chips
            Chip* allChips = nullptr;

            try {
                allChips = new Chip[numChips]; // Allocate memory for an array of Chip objects
            } catch (const std::bad_alloc& e) {
                std::cerr << "Memory allocation failed: " << e.what() << std::endl;
                return 1;
            }

            // Use the allChips array
            // ...

            // Safely deallocate memory
            delete[] allChips;
            allChips = nullptr;

            return 0;
        }
        ```

        If the problem persists, you might want to use tools like Valgrind to detect memory leaks and other 
        memory-related issues. Run the following command in your terminal to use Valgrind:

        ```sh
        valgrind --leak-check=full ./your_program
        ```

        Replace `./your_program` with the path to your compiled executable. This will help you identify where
         the memory allocation issues are occurring.

    Reasoning:
        When compiling that error was thrown.
    -----------------------------------------------------------------------------------------------------------------------
    Prompt: 
        Pasted progam here..
        Can you check my program for any leaks that could have caused the previous error?

    Response:
            To check for potential memory leaks and issues in your program, let's review the code step-by-step:

        1. **Memory Allocation and Deallocation**:
        - You allocate memory for [`allChips`]
        - Each element in [`allChips`]
        - You correctly deallocate

        2. **Destructor**:
        - The `Chip` destructor deletes `input1`, `input2`, and `output`. This can cause double deletion if multiple `Chip`
         objects point to the same `Chip` object. Ensure that each `Chip` object is only deleted once.

        3. **Potential Issues**:
        - **Double Deletion**: If multiple `Chip` objects share the same `input1`, `input2`, or `output`, deleting 
        one `Chip` will invalidate the pointers in the others.
        - **Uninitialized Pointers**: Ensure that `input1`, `input2`, and `output` are initialized to [`nullptr`]

        Here's a revised version of your code with some fixes:

        ***********************
        **pastes program here**
        ***********************

        ### Key Changes:
        1. **Initialization of Pointers**: Ensure `input1`, `input2`, and `output` are initialized to [`nullptr`]
        2. **Destructor**: Only delete `input1`, `input2`, and `output` if they are not [`nullptr`]
        3. **Memory Deallocation in `main`**: Added a loop to delete each `Chip` object in [`allChips`]

        These changes should help prevent memory leaks and double deletions. If the problem persists, consider using 
        Valgrind to further diagnose memory issues.

    Reasoning:
        Quick debugging so I can keep moving forward with development. I may still install valgrind like
        suggested since I have heard of that tool in the past. It did not end up fixing the issue so I'm
        going to debug this by hand. Literally found the block where the error was in 2 seconds... lol.
    -----------------------------------------------------------------------------------------------------------------------
    Prompt:
        int searchChips(Chip* chipsArray, size_t numChips, string chipName) {
            for (int i=0; i<numChips; ++i) {
                if ( chipsArray[i].getName() == chipName ) {
                    return i;
                }
            }
            return -1;
        }

        I think this causes the error somehow

    Response:
    1. **Dereferencing Null Pointers**: If [`chipsArray`]
    2. **Incorrect Array Passing**: Ensure that [`chipsArray`]
    3. **Memory Corruption**: If there is memory corruption elsewhere in the program, it could affect the 
    behavior of this function.
    Let's add some checks and debug output to help diagnose the issue:

    ***********************
    **pastes program here**
    ***********************

    ### Key Changes:
    1. **Null Pointer Check**: Added a check in [`searchChips`]
    2. **Error Messages**: Added error messages to help diagnose issues when a chip is not found or when
     a null pointer is encountered.
    3. **Correct Array Passing**: Changed the parameter type of [`chipsArray`]

    These changes should help you identify if there are any null pointers or other issues causing the error.

Reasoning:
    Help with debugging the error, the code generated by copilot just added debug prints........ But I myself saw that the
    bug was actually the way I was passing the array into the searchChips function. Fixed the error, got segmentation becaz
    copilt generated a second freaking delete[] array but as a loop at the end of my code, so I deleted that crap, and now
    the code works.
-----------------------------------------------------------------------------------------------------------------------
Prompt:
    I am currently trying to implement the compute method of my program. The point of the program to to recursivly step
    through and check if all the inputs are null or not, if null, they need to keep stepping until a value is found then 
    return it back up to the 050 chip to be outputted.

Response:
    To implement the [`compute`]

Here's a revised version of your [`compute`]

```cpp
void Chip::compute() {
    switch(chipType) {
        case 'A':
            if (input1 != nullptr && input2 != nullptr) {
                input1->compute();
                input2->compute();
                inputValue = input1->inputValue + input2->inputValue;
            }
            break;
        case 'S':
            if (input1 != nullptr && input2 != nullptr) {
                input1->compute();
                input2->compute();
                inputValue = input1->inputValue - input2->inputValue;
            }
            break;
        case 'M':
            if (input1 != nullptr && input2 != nullptr) {
                input1->compute();
                input2->compute();
                inputValue = input1->inputValue * input2->inputValue;
            }
            break;
        case 'D':
            if (input1 != nullptr && input2 != nullptr) {
                input1->compute();
                input2->compute();
                if (input2->inputValue != 0) {
                    inputValue = input1->inputValue / input2->inputValue;
                } else {
                    cerr << "Error: Division by zero" << endl;
                }
            }
            break;
        case 'N':
            if (input1 != nullptr) {
                input1->compute();
                inputValue = -input1->inputValue;
            }
            break;
        case 'I':
            // Input value is already set
            break;
        case 'O':
            cout << "Computation Starts" << endl;
            if (input1 != nullptr) {
                input1->compute();
                cout << "The output value from this circuit is " << input1->inputValue << endl;
            } else {
                cerr << "Error: No input for output chip" << endl;
            }
            break;
        default:
            cerr << "Error: Unknown chip type" << endl;
            break;
    }
}
```

### Explanation:
1. **Addition [`A`]
2. **Subtraction [`S`]
3. **Multiplication [`M`]
4. **Division [`D`]
5. **Negation [`N`]
6. **Input [`I`]
7. **Output [`O`]

### Usage Example:
To use the [`compute`]

```cpp
int main() {
    Chip inputChip('I', "1");
    inputChip.setInputValue(10);

    Chip addChip('A', "2");
    addChip.setInput1(&inputChip);
    addChip.setInput2(&inputChip);

    Chip outputChip('O', "3");
    outputChip.setInput1(&addChip);

    outputChip.compute();

    return 0;
}
```

This example sets up an input chip with a value of 10, an addition chip that adds the input chip's value 
to itself, and an output chip that prints the result. The [`compute`]

Reasoning:
    After a couple days of struggling to make progress on the best way to implement the recursive
    portion of the project, I decided to ask copilot and its answer was along the track of my thiking.
    Just helping to figure out the best way to implement this without writing spagheti code.

    Despite the above generated code by copliot being sufficient to finish the project. I am going to 
    go back through and try to use this code as a hint and still try to implement the method myself. This
    is good recursive practice Id prefer not to miss out on. Plus I wrote the entire rest of the project
    so giving it up to copilot in the end feels kind of bad..